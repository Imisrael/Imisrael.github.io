<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Basics on Documentation for Hugo docDock</title>
    <link>/en/sample-applications/basics/</link>
    <description>Recent content in Basics on Documentation for Hugo docDock</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    
	<atom:link href="/en/sample-applications/basics/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-10_collection-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-10_collection-delete/</guid>
      <description>Table of Contents
5.1.10 Data Deletion Overview This chapter covers deleting data from a GridDB collection.
Delete data Delete data from a collection with specifying a Row key.
List.1 Delete Data (CollectionDeleteRow.java)
// Get Collection Collection weatherStationCol = store.getCollection(&amp;ldquo;weather_station&amp;rdquo;, WeatherStation.class);
// Delete Row boolean deleteSucceed = weatherStationCol.remove(&amp;ldquo;1&amp;rdquo;); System.out.println(&amp;ldquo;Delete Succeed:&amp;rdquo; + deleteSucceed);
System.out.println(&amp;ldquo;ID\tName\t\t\tLongitude\tLatitude\tCamera&amp;rdquo;); for (int i = 0; i &amp;lt; WeatherStationLogic.JP_PREFECTURE; i++) { // Retrieve row by key WeatherStation weatherStation = weatherStationCol.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-11_collection-modify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-11_collection-modify/</guid>
      <description>Table of Contents
5.1.11 Collection Modification Overview This section describes modifying the schema and the index of a GridDB collection.
Schema Modification You can modify the schema by adding or deleting columns in a container after the container has been created.
This example demonstrates how to modify a newly created class with a new column in addition to WeatherStation class.
In addition, there is a way to modify the schema without creating a new class.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-12_timeseries-register/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-12_timeseries-register/</guid>
      <description>Table of Contents
5.1.12 Data Registration Overview This section describes the data registration for TimeSeries containers
Sample Data Similar to collection sample, data to be registered is initially stored in a CSV file. Data must be registered in order to later read. The contents of the CSV file (Instrument_log.csv) is as follows:
 Data held Measuring instrument ID Timestamp Temperature Live image file path   List.1 Measurement Log Contents (instrument_log.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-13_timeseries-retrieve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-13_timeseries-retrieve/</guid>
      <description>Table of Contents
5.1.13 Data Retrieval Overview This section describes the data acquisition of time-series container of GridDB in this chapter.
Data Acquisition The following are methods to fetch and read TimeSeries containers:
Specified time Time to get the data (= low) of the series container, you will need to specify the time is Rouki of time series container.
List.1 Acquire Data for a Specified Time (TimeSeriesRetrieve.java)
// Specify Time InstrumentLog log = logTs.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-14_timeseries-delete/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-14_timeseries-delete/</guid>
      <description>Table of Contents
5.1.14 TimeSeries Data Deletion Overview This section describes deleting data in a TimeSeries container.
Data deletion To delete the data (row) in a TimeSeries container, specify the timestamp of the rows you want to delete.
List.1 Delete TimeSeries Data (TimeSeriesDeleteRow.java)
SimpleDateFormat format = new SimpleDateFormat(&amp;ldquo;yyyy/MM/dd HH:mm&amp;rdquo;, Locale.US);
String containerName = &amp;ldquo;weather_station_1&amp;rdquo;; // Get TimeSeries Container TimeSeries logTs = store.getTimeSeries(containerName, InstrumentLog.class); Date deleteTime = format.parse(&amp;ldquo;2016/07/02 12:00&amp;rdquo;);
System.out.println(containerName + &amp;ldquo; ################&amp;rdquo;); System.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-15_timeseries-modify/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-15_timeseries-modify/</guid>
      <description>Table of Contents
5.1.15 TimeSeries Container Modification Overview This chapter describes the changing the schema of a TimeSeries container. Changing the index is same as changing the index as with a collection, please refer the Collection Modification chapter for details on that process.
Schema Modification Like you can with Collections, you can add or remove columns after creating a TimeSeriescontainer. Create a new class with the modified columns. The following AnotherInstrumentLog class shows an example of sch a change.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-16_tql/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-16_tql/</guid>
      <description>Table of Contents
5.1.16 TQL Overview This chapter covers the TQL query language for accessing GridDB. Only the SELECT statement is supported in TQL so no changes can be made to the database or schema. Please refer to the GridDB API reference for more information.
Conditional Search The TQL search functionality is the same as SQL.
List.1 Conditional Search(TqlSeach.java)
// Get TimeSeries Container TimeSeries logTs = store.getTimeSeries(&amp;ldquo;weather_station_1&amp;rdquo;, InstrumentLog.class);
// Seach by temperture String tql = String.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-17_trigger-rest/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-17_trigger-rest/</guid>
      <description>Table of Contents
5.1.17 Trigger (REST) Overview This chapter describes how to notify events by REST method in trigger function.
Trigger function A trigger function is an automatic notification function when an operation (add/update or delete) is carried out on the row data of a container. Event notifications can be received without the need to poll and monitor the database by application.
There are 2 ways of notifying events to the application.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-18_trigger-jms/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-18_trigger-jms/</guid>
      <description>Table of Contents
5.1.18 Trigger (JMS) Overview This section covers how to notify an application with JMS using Trigger functions. For an overview of the trigger function, please refer to the Trigger (rest) seciton.
Setting the Trigger List.1 Setting the Trigger(TriggerJms.java)
// Create Connection store = gridLogic.createGridStore();
// Create Trigger Settings TriggerInfo trigger = new TriggerInfo(); trigger.setName(&amp;ldquo;InstrumentLogJMSTrigger&amp;rdquo;); trigger.setType(Type.JMS); trigger.setJMSDestinationType(&amp;ldquo;queue&amp;rdquo;); trigger.setJMSDestinationName(&amp;ldquo;jms/griddb&amp;rdquo;); trigger.setTargetEvents(EnumSet.of(EventType.PUT)); trigger.setUser(&amp;ldquo;admin&amp;rdquo;); trigger.setPassword(&amp;ldquo;admin&amp;rdquo;); trigger.setURI(URI.create(&amp;ldquo;http://127.0.0.1:7676/&amp;quot;));
// Get TimeSeries Container TimeSeries logTs = store.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-19_multiput/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-19_multiput/</guid>
      <description>Table of Contents
5.1.19 Multi-Put Overview This section describes Multi-put, a method of registering batches of data at one time. It is described further in the GridDB Technical Reference.
Batch Processing When data is sent or received in a one by one manner it is possible to reach the upper limit of network bandwidth and throughput will peak, the following GridDB API&amp;rsquo;s offer a solution to this problem with methods to work with large sets of data in an efficient manner:</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-1_introduction/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-1_introduction/</guid>
      <description>Table of Contents
5.1.1 Introduction Overview This document introduces the basic programming using GridDB Java APIs. For more information about the GridDB API, please refer to the GridDB API Reference.
About the Sample application The sample application is a Weather Record Storage System, the contents of the &amp;ldquo;delivery system of weather observation data&amp;rdquo; are as follows.
Weather Record Storage System The weather data that the measuring instrument observes is written at regular intervals to the measurement log.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-20_multiquery/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-20_multiquery/</guid>
      <description>Table of Contents
5.1.20 Multi-Query What is Multi-Query Note: The concept of Multi-Query is described in our GridDB_TechnicalReference (Section 4.7.2)
Create query List.1 Create query(MultiQuery.java)
private static List&amp;gt; createQueries(TimeSeries logTs) throws ParseException, GSException { // Set TimeSeries conditions Date start = TimestampUtils.getFormat().parse(&amp;ldquo;2016-07-01T06:00:00Z&amp;rdquo;); Date end = TimestampUtils.getFormat().parse(&amp;ldquo;2016-07-01T18:00:00Z&amp;rdquo;);
List&amp;lt;Query&amp;lt;?&amp;gt;&amp;gt; queries = new ArrayList&amp;lt;&amp;gt;(); // Get Max Temperture String maxTempertureTql = String.format( &amp;quot;SELECT MAX(temperture) WHERE&amp;quot; \+ &amp;quot; TIMESTAMP(&#39;%s&#39;) &amp;lt; timestamp AND timestamp &amp;lt; TIMESTAMP(&#39;%s&#39;)&amp;quot;, TimestampUtils.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-21_multiget/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-21_multiget/</guid>
      <description>Table of Contents
5.1.21 Multi-Get What is Multi-Get Note: The concept of Multi-Get is described in our GridDB_TechnicalReference (Section 4.7.2)
Create the acquisition conditions List.1 Create the acquisition conditions(MultiGet.java)
private static Map&amp;gt; createMultiGetCondition( CollectionweatherStationCol) throws GSException, ParseException { SimpleDateFormat format = new SimpleDateFormat(&amp;ldquo;yyyy/MM/dd HH:mm&amp;rdquo;, Locale.US);
 // Create search condition of WeatherStation RowKeyPredicate&amp;lt;String&amp;gt; wsRowKeys = RowKeyPredicate.create(String.class); // Create multiget condition Map&amp;lt;String, RowKeyPredicate&amp;lt;?&amp;gt;&amp;gt; containerPredicateMap = new HashMap&amp;lt;&amp;gt;(); for (int i = 0; i &amp;lt; 2; i++) { // Get WeatherStation WeatherStation weatherStation = weatherStationCol.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-2_griddb-basics/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-2_griddb-basics/</guid>
      <description>Table of Contents
5.1.2 GridDB Basics Overview We will introduce a series of basic operations in this chapter to help better understand the overall of GridDB API. It should be noted that not all of specification information about specific GridDB API&amp;rsquo;s will be introduced. Please refer to the individual chapter for further details. In addition, this chapter uses the data described in the Introduction.
Application Workflow The basic workflow of a GridDB application is as follows:</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-3_prepare-server/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-3_prepare-server/</guid>
      <description>Table of Contents
5.1.3 Preparation: Environment (server) Overview This chapter covers setting up a GridDB server to use while running the sample application.
Components The environment will be configured as follows:
Figure 1 block diagram
Table 2 middleware version
   middleware version     GridDB Community Edition 2.8.0   Docker 1.12.0   Docker Compose 1.8.0    The environment in which you run GridDB will be built in a container using Docker but you can apply the same concepts to other VMs or a native OS to suit your environment.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-4_prepare-client/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-4_prepare-client/</guid>
      <description>Table of Contents
5.1.4 Preparation: Environment (client) Overview This chapter shows the procedure to build an environment where you can build and execute GridDB Java applications. These instructions are specifically use Windows 10 (64 bit) as a development environment and CentOS 7.2 (64 bit) as an execution environment but can be adapted for other operating systems as well.
Obtaining the files First download the following the files to your build environment, the tested versions and filenames are listed in Table 1.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-5_connection/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-5_connection/</guid>
      <description>Table of Contents
5.1.5 Preparation: Connecting to GridDB Overview This section describes the connecting to and disconnecting from a GridDB server.
Connecting to GridDB In order to connect with the GridDB server, we use a Property class to set the connnection details which will be used by GridStoreFactory to open a connection. Refer to Environment (server) on what these settings are configured as in your envrionment.
List.1 Connecting to a GridDB server (GridDBLogic.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-6_container-schema/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-6_container-schema/</guid>
      <description>Table of Contents
5.1.6 Schema definition Overview This chapter describes the schema definition and data types.
Schema definition Data of the measuring instruments and instrument log that will be handled in this sample application are defined in the container as follows.
Table.1 Container Information
   Data Container type Quantity Container name Row key     Measuring instrument Collection 1 weather_station Instrument ID   Instrument log TimeSeries Container 1 per instrument weatherstation (Example:weather_station_1) Logging date and time    One collection will be created with rows corresponding to different measuring instruments.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-7_container-create-drop/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-7_container-create-drop/</guid>
      <description>Table of Contents
5.1.7 Container Creation and Deletion Overview This chapter describes how to create/delete GridDB containers.
Collection and Timeseries Container There are 2 container types, a timeseries container and a collection.
 Timeseries container  A container that specializes for data whcih is consisted of the pair of time and value, such as sensor data. The TIMESTAMP data can be specified in a row key. It is possible to acquire the data in a specified period of time or to aggregate the data.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-8_collection-register/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-8_collection-register/</guid>
      <description>Table of Contents
5.1.8 Collection Registration Overview This chapter describes registering data in a GridDB collection.
Data to be registered Create registration data in a CSV file with the contents as follows:
 Measuring instrument CSV file  File name  Weather_station.csv  Retention data  Row 1: measuring instrument ID Row 2: The name Row 3: installation coordinates (latitude) Row 4: installation coordinates (longitude) Row 5: camera presence     List.</description>
    </item>
    
    <item>
      <title></title>
      <link>/en/sample-applications/basics/5-1-9_collection-retrieve/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>/en/sample-applications/basics/5-1-9_collection-retrieve/</guid>
      <description>Table of Contents
5.1.9 Data Retrieval Overview This chapter covers retrieving data using the GridDB API.
Retrieve data Retrieve data in a collection with specifying a Row key.
List.1 Data Read (WeatherStationLogic.java)
// Get Collection Collection weatherStationCol = store.getCollection(&amp;ldquo;weather_station&amp;rdquo;, WeatherStation.class); }
 L.24-25: Retrieve a collection by specifying a container name  List.2 Data Read by Row Key(CollectionRetrieve.java)
try { System.out.println(&amp;ldquo;ID \tName \t \t \tLongitude \tLatitude \tCamera&amp;rdquo;); for (int i=0; i &amp;lt; WeatherStationLogic.</description>
    </item>
    
  </channel>
</rss>